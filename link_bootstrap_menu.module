<?php

/**
 * Implements hook_field_formatter_info().
 */
function link_bootstrap_menu_field_formatter_info() {
  return array(
    'link_bootstrap_menu' => array(
      'label' => t('Bootstrap drop-down'),
      'field types' => array('link_field','entityreference'), // XXX Add 'taxonomy_term_reference' support
      'settings' => array(
	'label' => TRUE,
	'icon_css' => 'caret',
	'button_css' => 'btn-default'
      ),
    ),
  );
}

function link_bootstrap_menu_theme() {
  return array(
    'link_formatter_link_bootstrap_menu' => array(
      'variables' => array('element' => NULL, 'field' => NULL),
    ),
  );
}

function link_bootstrap_menu_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

//if ($display['type'] == '') {
    $element['label'] = array(
      '#title' => t('Display label in button'),
      '#type' => 'checkbox',
      '#default_value' => $settings['label'],
      '#description' => t('Hide or display label in button')
    );
    $element['button_css'] = array(
      '#type' => 'textfield',
      '#title' => t('Button CSS'),
      '#default_value' => $settings['button_css'],
      '#description' => t('The bootstrap CSS button btn-* value or custom')
    );
    $element['icon_css'] = array(
      '#type' => 'textfield',
      '#title' => t('Icon CSS'),
      '#default_value' => $settings['icon_css'],
      '#description' => t('Button icon CSS, bootstrap default is "caret"')
    );
//  }
return $element;
}

function link_bootstrap_menu_field_settings_form_validate($element, &$form_state, $complete_form) {
/* Nothing for now */
}

function link_bootstrap_menu_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $summary[] = $settings['label'] ? t('Use label') : t('No label');
  $summary[] = 'Button CSS: '.check_plain($settings['button_css']);
  $summary[] = 'Icon CSS: '.check_plain($settings['icon_css']);

  return implode('<br />', $summary);
}

function link_bootstrap_menu_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
if ($field['type']=='entityreference')
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function link_bootstrap_menu_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $i = array();

  $settings = $display['settings'];

  switch ($field['type']) {
    case 'entityreference':
    $target_type = $field['settings']['target_type'];
    foreach ($items as $item) {
        $label = entity_label($target_type, $item['entity']);
        $uri = entity_uri($target_type, $item['entity']);
        $i[]['data']=l($label, $uri['path'], $uri['options']);
    }

    break;
    case 'link_field':
    foreach ($items as $delta => $item) {
      $i[]['data']=theme('link_formatter_link_default', array('element'=>$item));
    }
    break;    
  }

  $label=$instance['label'];

  $btn=empty($settings['button_css']) ? 'btn-default' : check_plain($settings['button_css']);
  $icon=empty($settings['icon_css']) ? false : check_plain($settings['icon_css']);

  $prefix='<div class="dropdown"><button class="btn '.$btn.' dropdown-toggle" type="button" data-toggle="dropdown">';
  
  if (!empty($label) && $settings['label']!=false)
    $prefix.='<span class="dropdown-btn-label">'.$label.' </span>';
  
  if ($icon!==false)
    $prefix.='<span class="'.$icon.'"></span>';

  $prefix.='</button>';

  $r=array();
  $r[]=array(
   '#prefix' => $prefix,
   '#suffix' => '</div>',
   '#theme' => 'item_list',
   '#items' => $i,
   '#attributes' => array('class' => 'dropdown-menu'),
  );

  return $r;
}

/**
 * Formats a link.
 */
function theme_link_formatter_link_bootstrap_menu($vars) {
  $link_options = $vars['element'];
  unset($link_options['title']);
  unset($link_options['url']);

  if (isset($link_options['attributes']['class'])) {
    $link_options['attributes']['class'] = array($link_options['attributes']['class']);
  }
  // Display a normal link if both title and URL are available.
  if (!empty($vars['element']['title']) && !empty($vars['element']['url'])) {
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
  // If only a title, display the title.
  elseif (!empty($vars['element']['title'])) {
    return $link_options['html'] ? $vars['element']['title'] : check_plain($vars['element']['title']);
  }
  elseif (!empty($vars['element']['url'])) {
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
}

